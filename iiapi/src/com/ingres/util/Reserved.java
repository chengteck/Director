 package com.ingres.util;
 
 import java.util.HashSet;
 import java.util.Set;
 
 public enum Reserved
 {
   ABORT,  ACTIVATE,  ADD,  ADDFORM,  AFTER,  ALL,  ALTER,  AND,  ANY,  APPEND,  ARRAY,  AS,  ASC,  ASYMMETRIC,  AT,  AUTHORIZATION,  AVG,  AVGU,  BEFORE,  BEGIN,  BETWEEN,  BOOLEAN,  BREAKDISPLAY,  BY,  BYREF,  CACHE,  CALL,  CALLFRAME,  CALLPROC,  CASCADE,  CASE,  CAST,  CHECK,  CLEAR,  CLEARROW,  CLOSE,  COALESCE,  COLLATE,  COLUMN,  COMMAND,  COMMENT,  COMMIT,  COMMITED,  CONNECT,  CONSTRAINT,  CONTINUE,  COPY,  COPY_FROM,  COPY_INTO,  COUNT,  COUNTU,  CREATE,  CURRENT,  CURRENT_USER,  CURRVAL,  CURSOR,  CYCLE,  DATAHANDLER,  DECLARE,  DEFAULT,  DEFINE,  DELETE,  DELETEROW,  DESC,  DESCRIBE,  DESCRIPTOR,  DESTROY,  DIRECT,  DISABLE,  DISCONNECT,  DISPLAY,  DISTINCT,  DISTRIBUTE,  DO,  DOWN,  DROP,  ELSE,  ELSEIF,  ENABLE,  END,  END_EXEC("end-exec"),  ENDDATA,  ENDDISPLAY,  ENDFOR,  ENDFORMS,  ENDIF,  ENDLOOP,  ENDREPEAT,  ENDRETRIEVE,  ENDSELECT,  ENDWHILE,  ESCAPE,  EXCEPT,  EXCLUDE,  EXCLUDING,  EXECUTE,  EXISTS,  EXIT,  FALSE,  FETCH,  FIELD,  FINALIZE,  FIRST,  FOR,  FOREIGN,  FORMDATA,  FORMINIT,  FORMS,  FROM,  FULL,  GET,  GETFORM,  GETOPER,  GETROW,  GLOBAL,  GOTO,  GRANT,  GRANTED,  GROUP,  HAVING,  HELP,  HELP_FORMS,  HELP_FRS,  HELPFILE,  IDENTIFIED,  IF,  IIMESSAGE,  IIPRINTF,  IIPROMPT,  IISTATEMENT,  IMMEDIATE,  IMPORT,  IN,  INCLUDE,  INCREMENT,  INDEX,  INDICATOR,  INGRES,  INITIAL_USER,  INITIALIZE,  INITTABLE,  INNER,  INQUIRE_EQUEL,  INQUIRE_FORMS,  INQUIRE_FRS,  INQUIRE_INGRES,  INQUIRE_SQL,  INSERT,  INSERTROW,  INTEGRITY,  INTERSECT,  INTO,  IS,  ISOLATION,  JOIN,  KEY,  LEAVE,  LEFT,  LEVEL,  LIKE,  LOADTABLE,  LOCAL,  MAX,  MAXVALUE,  MENUITEM,  MESSAGE,  MIN,  MINVALUE,  MODE,  MODIFY,  MODULE,  MOVE,  NATURAL,  NEXT,  NEXTVAL,  NOCACHE,  NOCYCLE,  NOECHO,  NOMAXVALUE,  NOMINVALUE,  NOORDER,  NOT,  NOTRIM,  NULL,  NULLIF,  OF,  OFFSET,  ON,  ONLY,  OPEN,  OPTION,  OR,  ORDER,  OUT,  OUTER,  PARAM,  PARTITION,  PERMIT,  PREPARE,  PRESERVE,  PRIMARY,  PRINT,  PRINTSCREEN,  PRIVILEGES,  PROCEDURE,  PROMPT,  PUBLIC,  PURGETABLE,  PUTFORM,  PUTOPER,  PUTROW,  QUALIFICATION,  RAISE,  RANGE,  RAWPCT,  READ,  REDISPLAY,  REFERENCES,  REFERENCING,  REGISTER,  RELOCATE,  REMOVE,  RENAME,  REPEAT,  REPEATABLE,  REPEATED,  REPLACE,  REPLICATE,  RESTART,  RESTRICT,  RESULT,  RESUME,  RETRIEVE,  RETURN,  REVOKE,  RIGHT,  ROLE,  ROLLBACK,  ROW,  ROWS,  RUN,  SAVE,  SAVEPOINT,  SCHEMA,  SCREEN,  SCROLL,  SCROLLDOWN,  SCROLLUP,  SECTION,  SELECT,  SERIALIZABLE,  SESSION,  SESSION_USER,  SET,  SET_4GL,  SET_EQUEL,  SET_FORMS,  SET_FRS,  SET_INGRES,  SET_SQL,  SLEEP,  SOME,  SORT,  SQL,  START,  STOP,  SUBMENU,  SUBSTRING,  SUM,  SUMU,  SYMMETRIC,  SYSTEM,  SYSTEM_MAINTAINED,  SYSTEM_USER,  TABLE,  TABLEDATA,  TEMPORARY,  THEN,  TO,  TRUE,  TYPE,  UNCOMMITTED,  UNION,  UNIQUE,  UNKNOWN,  UNLOADTABLE,  UNTIL,  UP,  UPDATE,  USER,  USING,  VALIDATE,  VALIDROW,  VALUES,  VIEW,  WHEN,  WHENEVER,  WHERE,  WHILE,  WITH,  WORK,  WRITE;
   
   private String name;
   private static Set<String> wordSet;
   
   private Reserved()
   {
     this.name = super.toString().toLowerCase();
   }
   
   private Reserved(String override)
   {
     this.name = override;
   }
   
   public String getName()
   {
     return this.name;
   }
   
   public static boolean isReserved(String word)
   {
     return wordSet.contains(word.toLowerCase());
   }
   
   static
   {
     wordSet = new HashSet<String>();
     for (Reserved res : values()) {
       wordSet.add(res.getName());
     }
   }
 }


